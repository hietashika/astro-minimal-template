---
description: 
globs:
alwaysApply: true
---

# 設計原則

本プロジェクトでは、以下の設計原則を採用しています。これらの原則は、コードの品質、保守性、および拡張性を向上させるために重要です。

## 原則1: 関心の分離

- ビジネスロジック、プレゼンテーションロジック、データアクセスを明確に分離します
- 各コンポーネントは単一の責任を持つようにします（単一責任の原則）
- インターフェースを通じてコンポーネント間の依存関係を最小限に抑えます

## 原則2: 宣言的UIパターン

- UIの状態とその表示を分離します
- コンポーネントは受け取ったプロパティに基づいて宣言的にレンダリングします
- 副作用は専用のフックやサービスに分離します

## 原則3: 型安全性の最大化

- TypeScriptの型システムを最大限に活用して、コンパイル時にエラーを検出します
- `any`型の使用を避け、明示的な型定義を使用します
- 複雑なデータ構造には適切なインターフェースや型エイリアスを定義します

## 原則4: 段階的デグラデーション

- 基本機能はJavaScriptなしでも動作するように設計します
- 拡張機能はプログレッシブエンハンスメントとして追加します
- 異なるブラウザ環境や接続状況でも基本機能が動作することを保証します

## 原則5: パフォーマンス優先

- 初期読み込み時間を最小化するために、必要なJavaScriptのみをロードします
- 大きなアセットは遅延ロードまたはストリーミングで提供します
- パフォーマンスメトリクスを定期的に測定し、最適化を行います

## 原則6: インクリメンタルな開発

- 大きな機能は小さなステップに分解して実装します
- 各ステップは独立してテスト可能である必要があります
- 頻繁に統合し、早期にフィードバックを得ます

## 原則7: コンポーネントの再利用性

- コンポーネントは再利用可能な単位として設計します
- コンポーネントの責務を明確に定義し、過度の機能を持たせません
- 共通のUIパターンはコンポーネントライブラリとして抽出します

## 原則8: コードの一貫性

- プロジェクト全体で一貫したコーディングスタイルとパターンを使用します
- 新しいコードは既存のアーキテクチャに従います
- 設計上の決定は明示的に文書化し共有します

これらの原則は絶対的なルールではなく、状況に応じて判断を行う際の指針として使用してください。原則から逸脱する必要がある場合は、承認を経て行ってください。
