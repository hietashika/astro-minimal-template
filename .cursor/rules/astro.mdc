---
description:
globs: *.astro
alwaysApply: false
---

# Astroフレームワークルール

このルールには、Astroフレームワークを使用する際のルールとベストプラクティスが含まれています。

## アイランドアーキテクチャ

Astroフレームワークの「アイランドアーキテクチャ」を採用しています。
このアーキテクチャは、パフォーマンスとインタラクティビティのバランスを取るための重要な概念です。

### アイランドアーキテクチャの基本概念

アイランドアーキテクチャとは、静的なHTMLの「海」の中に、インタラクティブな「島」（コンポーネント）を配置するアプローチです。
このアプローチの利点は以下の通りです：

- **パフォーマンス向上**: 必要な部分だけにJavaScriptを読み込み、初期ロード時間を短縮
- **プログレッシブエンハンスメント**: 基本機能は静的HTMLで提供し、JavaScriptで機能を強化
- **部分的ハイドレーション**: インタラクティブな要素のみをハイドレーションし、不要なJavaScriptを削減

### アイランドの適切な使用

アイランド（インタラクティブコンポーネント）は以下のガイドラインに従って使用してください：

1. **必要な場合のみ使用**: ユーザー入力、動的データ更新、アニメーションなど、本当に必要な場合のみインタラクティブコンポーネントを使用
2. **サイズを最小限に**: アイランドはできるだけ小さく保ち、特定の機能に焦点を当てる
3. **静的代替の検討**: JavaScriptがなくても基本機能が動作するよう、静的な代替手段を検討

### クライアントディレクティブの使用

Astroのクライアントディレクティブは以下のルールに従って使用してください：

- **client:load**: 即時ロードが必須の重要なインタラクティブ要素のみに使用
- **client:idle**: ページロード後に初期化しても問題ない要素に使用
- **client:visible**: 画面に表示されたときにのみ初期化すべき要素に使用
- **client:media**: 特定のメディアクエリに一致したときにのみ必要な要素に使用
- **client:only**: 静的なHTMLフォールバックが不要または不可能な場合のみ使用

### アイランドの粒度と責任

- **単一責任の原則**: 各アイランドは明確に定義された一つの責任を持つべき
- **データの分離**: UIの状態とアプリケーションのデータを明確に分離
- **通信の最小化**: アイランド間の通信は最小限に抑え、必要な場合はイベントやストアを使用

### パフォーマンス考慮事項

- **バンドルサイズ**: 各アイランドのJavaScriptバンドルサイズを監視し、必要に応じて最適化
- **初期化タイミング**: 適切なクライアントディレクティブを選択し、初期化のタイミングを最適化
- **依存関係**: 不要な依存関係を含めないよう、各コンポーネントの依存関係を最小限に抑える

### アンチパターン

以下の使用方法は避けてください：

- ページ全体を単一のインタラクティブコンポーネントにする
- 静的なコンテンツをインタラクティブコンポーネント内に配置する
- インタラクティブ性が不要な要素にクライアントディレクティブを使用する
- 複数のアイランド間で複雑な状態を共有する
