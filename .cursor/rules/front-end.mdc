---
description: 
globs: *.astro,*.css,*.scss,*.ts
alwaysApply: false
---

# フロントエンドのルール

フロントエンドを実装する際に、参考にしてほしいルールについて説明します。

## フロントエンドのディレクトリ構成
Astroをベースとしたコンポーネント指向の設計を採用しています。再利用可能なUIコンポーネントとレイアウトプリミティブを組み合わせて効率的な開発を実現します。

```
ここにディレクトリ構成をアスキーツリーで表示
```



## 既存ファイルの例
常にこれらのファイルの記法を参考にして、実装を行ってください。



## フロントエンドのコーディング規約

常に[Astroの公式ドキュメント](https://docs.astro.build/en/getting-started/)を参照し、ベストプラクティスな実装を行う。

## html

マークアップにはHTML5で書いてください。

考慮すべきことは下記です

- コンテンツの性質、制作者の狙い
- HTMLのセマンティクス
- WAI-ARIAのセマンティクス
- ブラウザ・OS・スクリーンリーダーでのサポート状況、ユーザーにとっての使い勝手
- CSSやJavaScriptなど周辺技術との兼ね合い、連携のしやすさ
- ソースコードの運用性

## CSSのルール
メタ言語には、効率的にcssを書くためscssを採用しています。

### CSS設計
CSS Architectureの考え方を採用しています。
- 予測しやすい
- 保守しやすい
- 拡張しやすい
- 再利用性が高い

上記を踏まえて、実装を行ってください。

### CSSの詳細度
破綻をしないCSSを書くために、CSSの詳細度を意識してください。

- !importantを使わない
- style属性を使わない
- idにスタイルをつけない
- 要素セレクタにスタイルをつけない

### CSSの書式ルール
CSSの書き方に統一性を持たせてください。

- 引用符: ダブルクォーテーション
- プロパティの並べ方: アルファベット順
- インデントの開け方: 2spaces
- 宣言の終止符は必ずつける
- セレクタ名の後には必ずスペースを1つつける
- プロパティの後ろにはスペースを1つ入れる
- 値が1以下の少数は0を省略する`0.5`→`.5`
- 値が0の場合は単位を省略する`0`
- 色はoklchで指定する
- なるべくコメントを残す

基本的にGoogle HTML/CSS Style Guideを参考にしています。

PrettierとStylelintを使って、CSSの書式を統一しています。

### SCSSの利用について
SCSSを活用して、変数を定義しています。

変数で定義するもの
- 配色
- フォントサイズ、フォントファミリー
- 絶対値の余白
- アニメーション
- コンテナの最大幅
- 各パーツのデフォルトのサイズ


### 命名規則

class名は誰が見てもわかりやすいように命名してください。

- 誰が見ても意味の分かるclass名をつける
- 統一感のある命名をする
- 省略せずに書く
- ハイフン区切りで命名する `main-visual`
- デザインの変更に強いclass名を付ける NG`details-block-left` OK`details-block__image`

#### その他の注意点

1. **再利用性**:
   - ブロックは独立して再利用できるようにする
   - 特定のコンテキストに依存するスタイルは避ける

2. **グローバルなリセットとの組み合わせ**:
   - リセットCSSと組み合わせて使用する
   - 要素セレクタの直接スタイリングは避け、クラスベースのスタイリングを優先する

### カスケードレイヤー
ITCSSの設計思想に基づいて、カスケードレイヤーを採用しています。 
カスケードレイヤーの設定は、[global.scss](src/styles/global.scss)に記載しています。
1. Settings - グローバル変数や設定（例：色、フォントサイズなど）
2. Tools - ミックスインや関数（例：メディアクエリ、ユーティリティ関数など）
3. Generic - リセットやノーマライズ（例：reset.css）
4. Elements - HTML要素の基本的なスタイル（例：h1, p, aなど）
5. Objects - レイアウトに関連するクラス（例：グリッドシステム、コンテナなど）

より詳細なITCSSガイドラインは、[007_itcss_layers.md](rules/front-end/007_itcss_layers.md)を参照してください。

### reset.css
Reset.cssはdestyle.cssを採用。
[reset.css](mdc:src/styles/reset.css)

### レスポンシブデザイン
メディアクエリに依存しない柔軟なレイアウトを優先します。
EveryLayoutや、CSS Gridを活用してください。

### レスポンシブタイポグラフィ

このプロジェクトでは、レスポンシブなタイポグラフィを実装するために`clamp-size`ミックスインを使用します。 [_function.scss](src/styles/tools/_function.scss)



## Astroコンポーネントのベストプラクティス

### アイランドアーキテクチャの活用

インタラクティブな部分のみをクライアントサイドでレンダリングし、それ以外は静的HTMLとして出力することで、パフォーマンスを向上させます。

### Reference

[Astro 公式ドキュメント](https://astro.build/docs/)


## ITCSSレイヤー構成の詳細ガイド

ITCSSは「Inverted Triangle CSS」の略で、CSSを詳細度に基づいて階層化して管理する設計手法です。このプロジェクトでは、ITCSSの思想に基づいて以下のレイヤー構成を採用しています。

レイヤーは常に以下の順序で読み込まれます：
```scss
@layer settings, tools, generic, elements, objects, components, utilities;
```

### 1. Settings - 設定レイヤー
**役割**: グローバル変数や設定を定義します。
**特徴**: CSSは出力されず、変数定義のみです。

**含まれるべきファイル**:
- `_variables.scss` - カラー、タイポグラフィ、スペーシング、ブレイクポイントなどの変数

### 2. Tools - ツールレイヤー
**役割**: ミックスインや関数を定義します。
**特徴**: CSSは出力されず、再利用可能なロジックを提供します。

**含まれるべきファイル**:
- `_function.scss` - ユーティリティ関数（rem変換、clamp計算など）
- `_mixin.scss` - 再利用可能なスタイル定義（必要に応じて）

**使用例**:
```scss
// _function.scss
@function rem($size) {
  @return calc($size / 16 * 1rem);
}
```

### 3. Generic - 汎用レイヤー
**役割**: リセットやノーマライズなど、高い詳細度を持たないベースになるスタイルを定義します。
**特徴**: 詳細度が低く、ページ全体に影響します。

**含まれるべきファイル**:
- `_reset.css` - destyle.cssベースのリセットスタイル

### 4. Elements - 要素レイヤー
**役割**: HTML要素自体のスタイルを定義します。
**特徴**: 要素セレクタ（h1, p, aなど）に対するスタイリングです。

**含まれるべきファイル**:
- `_base.scss` - 基本的なHTML要素のスタイル

**使用例**:
```scss
// _base.scss
html {
  font-family: var(--font-family-base);
  color: var(--color-text);
  line-height: 1.5;
}
```

### 5. Objects - オブジェクトレイヤー
**役割**: 装飾を持たない構造的なパターンを定義します。
**特徴**: コンテナ、グリッド、レイアウトなどの見た目に依存しない構造的なスタイルです。


### 6. Components - コンポーネントレイヤー
**役割**: 具体的なUIコンポーネントのスタイルを定義します。
**特徴**: 特定のUI要素に対する完全なスタイリングです。

**含まれるべきファイル**:
- `_buttons.scss` - ボタンスタイル
- `_cards.scss` - カードスタイル
- `_forms.scss` - フォームスタイル
- などコンポーネント毎のファイル

**使用例**:
```scss
// _buttons.scss（未実装）
.c-button {
  // ベーススタイル
  &--primary {
    // プライマリバリエーション
  }
}
```

### 7. Utilities - ユーティリティレイヤー
**役割**: 単一の目的を持つヘルパークラスを定義します。
**特徴**: 通常 !important フラグを使用し、他のすべてのスタイルをオーバーライドします。

**含まれるべきファイル**:
- `_spacing.scss` - マージンやパディングのユーティリティ
- `_typography.scss` - テキスト関連のユーティリティ
- `_display.scss` - 表示プロパティのユーティリティ
- `_visibility.scss` - 可視性のユーティリティ

**使用例**:
```scss
// _spacing.scss（未実装）
.u-mt-0 { margin-top: 0 !important; }
.u-mb-s { margin-bottom: var(--space-s) !important; }
```

## ITCSSの使用ガイドライン

1. **ファイル命名規則**:
   - アンダースコアでプレフィックスを付ける: `_filename.scss`
   - 複数の単語はハイフンで区切る: `_component-name.scss`

2. **インポート順序**:
   - 常にレイヤーの順序に従ってインポートする
   - 同じレイヤー内では、アルファベット順でインポートする

3. **セレクタの詳細度**:
   - 上位レイヤーほど詳細度を低く保つ
   - 下位レイヤーになるにつれて詳細度が高くなることを許容する

4. **!important の使用**:
   - utilitiesレイヤーでのみ使用可能
   - 他のレイヤーでは原則使用禁止 